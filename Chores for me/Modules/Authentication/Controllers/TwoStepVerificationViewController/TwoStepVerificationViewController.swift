//
//  TwoStepVerificationViewController.swift
//  Chores for me
//
//  Created by Chores for me 2019 on 14/04/21.
//

import UIKit
import Designable


class TwoStepVerificationViewController: ServiceBaseViewController {
    
    
    // MARK: - Outlets
    @IBOutlet weak private var backButton: UIButton!
    @IBOutlet var otpSendLabel: UILabel!
    @IBOutlet var resendButton: UIButton!
    @IBOutlet var verificationTextField: UITextField!
    @IBOutlet var countDownLabel: UILabel!
    @IBOutlet var numberLabel: UILabel!
    
    
    // MARK: - Properties
    var otpFeild: Int?
    var otpTimer = Timer()
    var totalTime = 31
    
    
    // MARK: - View Lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        navigationItem.title = AppString.TWO_STEP_VERIFICATION
        //let image = UIImage(named: "BACK")?.withRenderingMode(.alwaysTemplate)
      //  backButton.setImage(image, for: .normal)
        let last = UserStoreSingleton.shared.phoneNumer
        let last4 = String(last?.suffix(3) ?? "")
        numberLabel.text = "Enter the verification code generated by your phone ends with +x xxx xxx xx\(last4)."
        resendButton.setTitle("Click in ", for: .normal)
       otpTimer = Timer.scheduledTimer(timeInterval: 1, target: self, selector: #selector(updateTimer), userInfo: nil, repeats: true)
        navigationController?.navigationBar.isHidden = false
       // navigationController?.darkNavigationBar()
        
    }
    override func viewWillAppear(_ animated: Bool) {
    self.navigationController?.navigationBar.tintColor = UIColor.white

    }
    
        
    // MARK: - User Interaction
    @IBAction func continueButtonAction(_ sender: Any) {
        if  verificationTextField.text == "" {
            openAlert(title: "Chores for me", message: "Please Enter Valid Otp", alertStyle: .alert, actionTitles: ["OK"], actionStyles: [.default], actions: [{ _ in
            }])
        } else{
            OTPVerificationApi()
        }
    }
    @IBAction func resendButtonAction(_ sender: Any) {
        totalTime = 31
        otpTimer = Timer.scheduledTimer(timeInterval: 1, target: self, selector: #selector(updateTimer), userInfo: nil, repeats: true)
        sendOtp()
    }
    
    @IBAction func backButton(_ sender: UIButton) {
        navigationController?.popViewController(animated: true)
    }
    
    @IBAction func isSelectedButton(_ sender: DesignableButton) {
        sender.isSelected.toggle()
    }
    
    // MARK: - Additional Helpers
    func OTPVerificationApi() {
        showActivity()
        let Url = String(format: "http://3.18.59.239:3000/api/v1/verifyOTP")
        guard let serviceUrl = URL(string: Url) else { return }
        let phoneNumber = "\(UserStoreSingleton.shared.Dialcode ?? "")\(UserStoreSingleton.shared.phoneNumer ?? "")"
        let parameterDictionary =  ["OTP": verificationTextField.text ?? "" ,"phone" : phoneNumber,"signupType": "1"] as [String: Any]
        var request = URLRequest(url: serviceUrl)
        request.httpMethod = "POST"
        request.setValue("Application/json", forHTTPHeaderField: "Content-Type")
        guard let httpBody = try? JSONSerialization.data(withJSONObject: parameterDictionary, options: []) else {
            return
        }
        request.httpBody = httpBody
        
        let session = URLSession.shared
                session.dataTask(with: request) { (data, response, error) in
            guard let data = data else { return }
            do {
                let gitData = try JSONDecoder().decode(VerifyOtpModel.self, from: data)
                print("response data:", gitData)
                DispatchQueue.main.async {
                    self.hideActivity()
                    let status = gitData.status
                    if status == 200{
                        self.getUserProfile()
                        self.navigate(.allowLocation)
                    } else {
                        self.showMessage(gitData.message ?? "")
                    }
                }
            } catch let err {
                self.hideActivity()
                print("Err", err)
            }
        }.resume()
    }
    
    func getUserProfile() {
        showActivity()
        var request = URLRequest(url: URL(string: "http://3.18.59.239:3000/api/v1/get-user-Profile")!,timeoutInterval: Double.infinity)
        request.addValue("\(UserStoreSingleton.shared.Token ?? "")", forHTTPHeaderField:"Authorization")
        request.httpMethod = "GET"
        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            //self.hideActivity()
            do {
                let json =  try JSONDecoder().decode(GetUserProfileModel.self, from: data ?? Data())
                DispatchQueue.main.async {
                    self.hideActivity()
                    
                    let photoUrl = URL(string: "\(json.data?.image ?? "")")
                    UserStoreSingleton.shared.socailProfileImage = json.data?.image ?? ""
                    UserStoreSingleton.shared.userID = json.data?.userId
                }
            } catch {
                self.hideActivity()
                print(error)
            }
        }
        task.resume()
    }
    
    func sendOtp() {
        showActivity()
        guard let gitUrl = URL(string:"http://3.18.59.239:3000/api/v1/sendOtp") else { return }
        print(gitUrl)
        
        let request = NSMutableURLRequest(url: gitUrl)
        let phoneNumber = "\(UserStoreSingleton.shared.Dialcode ?? "")\(UserStoreSingleton.shared.phoneNumer ?? "")"
        let parameters = ["phone":phoneNumber,"signupType": "1"]
        let session = URLSession.shared
        request.httpMethod = "POST"
        request.addValue("application/json", forHTTPHeaderField: "Content-Type")
        request.addValue("application/json", forHTTPHeaderField: "Accept")
        request.httpBody = try! JSONSerialization.data(withJSONObject: parameters, options: [])
        session.dataTask(with: request as URLRequest) { [self] data, response, error in
            guard let data = data else { return }
            do {
                let gitData = try JSONDecoder().decode(SendOtpModel.self, from: data)
                DispatchQueue.main.async {
                    self.hideActivity()
                    let response = gitData.status
                    if response == 200{
                        _ = gitData.data?.oTP
                        self.showMessage(gitData.message ?? "")
                    }
                    else{
                        self.showMessage(gitData.message ?? "")
                        
                    }
                    
                }
            } catch let err {
                self.hideActivity()
                print("Err", err)
            }
        }.resume()
    }
    
    @objc func updateTimer() {
        if(totalTime > 0) {
            totalTime = totalTime - 1
            countDownLabel.isHidden = false
            countDownLabel.text = String(totalTime)
            resendButton.setTitle("Click in ", for: .normal)
            resendButton.isEnabled = false
            
        }
        else {
            countDownLabel.isHidden = true
            resendButton.setTitle(" Click Here ", for: .normal)
            resendButton.isEnabled = true
            otpTimer.invalidate()
        }

    }
}







